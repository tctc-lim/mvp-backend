// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User roles enum
enum UserRole {
  SUPER_ADMIN
  ADMIN
  ZONAL_COORDINATOR
  CELL_LEADER
  FOLLOW_UP_TEAM
}

// User model for authentication and authorization
model User {
  id              String           @id @default(uuid())
  email           String         @unique
  password        String
  role            UserRole
  name            String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  zone            Zone?          @relation("ZonalCoordinator")
  cell            Cell?          @relation("CellLeader")
  assignedFollowUps FollowUp[]     @relation("AssignedFollowUps")
  verifiedMilestones MemberMilestone[]
  mustChangePassword Boolean  @default(false)
}

// Zone model for church zones
model Zone {
  id          String    @id @default(uuid())
  name        String
  description String?
  coordinator User      @relation("ZonalCoordinator", fields: [userId], references: [id])
  userId      String    @unique
  cells       Cell[]
  members     Member[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Cell model for church cells
model Cell {
  id        String    @id @default(uuid())
  name      String
  leader    User      @relation("CellLeader", fields: [userId], references: [id])
  userId    String    @unique
  zone      Zone      @relation(fields: [zoneId], references: [id])
  zoneId    String
  members   Member[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Member status enum
enum MemberStatus {
  FIRST_TIMER
  SECOND_TIMER
  FULL_MEMBER  // After 3 Sunday attendances
}

// Add this new enum for conversion status
enum ConversionStatus {
  NOT_CONVERTED
  NEW_CONVERT    // Can be any member who has given their life to Christ
  REDEDICATED    // For existing believers who rededicated their lives
}

// Member model for church members
model Member {
  id              String           @id @default(uuid())
  name            String
  email           String?          @unique
  phone           String
  address         String
  gender          String
  status          MemberStatus     @default(FIRST_TIMER)
  conversionStatus ConversionStatus @default(NOT_CONVERTED)
  zone            Zone             @relation(fields: [zoneId], references: [id])
  zoneId          String
  cell            Cell?            @relation(fields: [cellId], references: [id])
  cellId          String?
  firstVisit      DateTime         @default(now())
  lastVisit       DateTime         @default(now())
  prayerRequest   String?
  followUps       FollowUp[]
  milestones      MemberMilestone[]
  departments     MemberDepartment[]
  sundayAttendance Int             @default(0)  // Track number of Sunday services
  conversionDate  DateTime?        // When they became a new convert
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum FollowUpType {
  PHONE_CALL
  VISITATION
  ATTENDANCE_CHECK
}

enum FollowUpStatus {
  PENDING
  COMPLETED
  NOT_REACHABLE
  RESCHEDULED
  DECLINED
}

enum MilestoneType {
  JOINED_CELL
  JOINED_DEPARTMENT
  DCA_BASIC
  DCA_MATURITY
  ENCOUNTER
  DLI
  SUNDAY_SERVICE_ATTENDANCE
}

model FollowUp {
  id              String         @id @default(uuid())
  member          Member         @relation(fields: [memberId], references: [id])
  memberId        String
  type            FollowUpType
  status          FollowUpStatus @default(PENDING)
  notes           String?
  assignedTo      User          @relation("AssignedFollowUps", fields: [userId], references: [id])
  userId          String
  nextFollowUpDate DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Department {
  id          String            @id @default(uuid())
  name        String
  members     MemberDepartment[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model MemberDepartment {
  id           String     @id @default(uuid())
  member       Member     @relation(fields: [memberId], references: [id])
  memberId     String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  joinDate     DateTime   @default(now())
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([memberId, departmentId])
}

model MemberMilestone {
  id          String        @id @default(uuid())
  member      Member        @relation(fields: [memberId], references: [id])
  memberId    String
  type        MilestoneType
  date        DateTime      @default(now())
  verified    Boolean       @default(false)
  verifiedBy  User?        @relation(fields: [verifierId], references: [id])
  verifierId  String?
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
